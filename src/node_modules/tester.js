const assert = require('chai').assert

function checkArray (assert, res) {
  assert[res[0] && typeof res[0] === 'object' ? 'deepEqual' : 'equal'](res[0], res[1], res[2])
}

function check (assert, res) {
  if (res === undefined) return

  if (res instanceof Array) return checkArray(assert, res)

  if (res instanceof Promise) {
    res.then((data) => {
      check(assert, data)
    })
      .catch((err) => { assert.throws(err) })
  } else {
    assert.isTrue(res)
  }
}

function run_test (text, callback) {
  it(text, () => {
    check(assert, callback(assert))
  })
}

function test (tests) {
  for (const title in tests) {
    describe(title, () => {
      const subtests = tests[title]

      for (const text in subtests) {
        run_test(text, subtests[text])
      }
    })
  }
}

function obj_val (o) {
  return o[Object.keys(o)[0]]
}

module.exports = function (modules) {
  if (typeof obj_val(obj_val(modules)) === 'function') { // tests -> subtests -> function
    test(modules)
    return
  }

  for (const name in modules) {
    describe(name, () => {
      test(modules[name])
    })
  }
}
